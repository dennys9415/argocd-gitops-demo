name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate-manifests:
    name: Validate Kubernetes Manifests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Kubernetes tools
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Validate Kubernetes manifests
      run: |
        echo "Validating Kubernetes manifests..."
        for file in $(find . -name "*.yaml" -o -name "*.yml"); do
          if [[ $file != *".github"* ]] && [[ $file != *"node_modules"* ]]; then
            echo "Validating $file"
            kubectl apply --dry-run=client -f "$file" || exit 1
          fi
        done

    - name: Validate Kustomize overlays
      run: |
        echo "Validating Kustomize configurations..."
        for overlay in apps/overlays/*; do
          if [ -d "$overlay" ] && [ -f "$overlay/kustomization.yaml" ]; then
            echo "Validating $overlay"
            kustomize build "$overlay" | kubectl apply --dry-run=client -f - || exit 1
          fi
        done

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for secrets
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sync-argocd:
    name: Sync ArgoCD
    if: github.ref == 'refs/heads/main'
    needs: [validate-manifests, security-scan]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Sync ArgoCD applications
      run: |
        # This would sync ArgoCD applications after successful CI
        # In production, you might want manual approval here
        echo "CI passed - ArgoCD will automatically sync changes"
      env:
        ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        ARGOCD_TOKEN: ${{ secrets.ARGOCD_TOKEN }}